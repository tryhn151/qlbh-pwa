// Test workflow m·ªõi c·ªßa tab Chuy·∫øn h√†ng
// T·∫°o d·ªØ li·ªáu test v√† ki·ªÉm tra c√°c ch·ª©c nƒÉng

console.log('üß™ B·∫Øt ƒë·∫ßu test workflow m·ªõi tab Chuy·∫øn h√†ng...');

// Test data
const testCustomers = [
    { name: 'Nguy·ªÖn VƒÉn A', phone: '0901234567', address: 'H√† N·ªôi' },
    { name: 'Tr·∫ßn Th·ªã B', phone: '0902345678', address: 'TP.HCM' }
];

const testProducts = [
    { name: 'S·∫£n ph·∫©m 1', currentStock: 100 },
    { name: 'S·∫£n ph·∫©m 2', currentStock: 50 }
];

const testOrders = [
    {
        customerId: 1,
        orderDate: '2024-01-15',
        status: 'Ch·ªù x·ª≠ l√Ω',
        items: [
            { productId: 1, productName: 'S·∫£n ph·∫©m 1', qty: 10, sellingPrice: 50000, purchasePrice: 40000 }
        ],
        paymentReceived: 0
    },
    {
        customerId: 2,
        orderDate: '2024-01-16',
        status: 'Ch·ªù x·ª≠ l√Ω',
        items: [
            { productId: 2, productName: 'S·∫£n ph·∫©m 2', qty: 5, sellingPrice: 30000, purchasePrice: 25000 }
        ],
        paymentReceived: 0
    }
];

const testTrip = {
    tripName: 'Chuy·∫øn test workflow m·ªõi',
    tripDate: '2024-01-20',
    status: 'ƒêang th·ª±c hi·ªán'
};

async function runTestWorkflow() {
    try {
        console.log('üìù T·∫°o d·ªØ li·ªáu test...');
        
        // T·∫°o kh√°ch h√†ng test
        const customerIds = [];
        for (const customer of testCustomers) {
            const id = await addCustomer(customer);
            customerIds.push(id);
            console.log(`‚úÖ T·∫°o kh√°ch h√†ng ID: ${id}`);
        }

        // T·∫°o s·∫£n ph·∫©m test
        const productIds = [];
        for (const product of testProducts) {
            const id = await addProduct(product);
            productIds.push(id);
            console.log(`‚úÖ T·∫°o s·∫£n ph·∫©m ID: ${id}`);
        }

        // T·∫°o ƒë∆°n h√†ng test
        const orderIds = [];
        for (let i = 0; i < testOrders.length; i++) {
            const order = { ...testOrders[i], customerId: customerIds[i] };
            const id = await addOrder(order);
            orderIds.push(id);
            console.log(`‚úÖ T·∫°o ƒë∆°n h√†ng ID: ${id}`);
        }

        // T·∫°o chuy·∫øn h√†ng test
        const tripId = await addTrip(testTrip);
        console.log(`‚úÖ T·∫°o chuy·∫øn h√†ng ID: ${tripId}`);

        console.log('\nüîÑ Test li√™n k·∫øt ƒë∆°n h√†ng v·ªõi chuy·∫øn h√†ng...');
        // Li√™n k·∫øt ƒë∆°n h√†ng v·ªõi chuy·∫øn h√†ng
        await linkOrdersToTrip(tripId, orderIds);
        console.log('‚úÖ Li√™n k·∫øt ƒë∆°n h√†ng th√†nh c√¥ng');

        console.log('\nüí∞ Test thanh to√°n t·ª´ng ph·∫ßn...');
        // Test thanh to√°n t·ª´ng ph·∫ßn ƒë∆°n h√†ng ƒë·∫ßu ti√™n
        const order1Total = testOrders[0].items[0].qty * testOrders[0].items[0].sellingPrice;
        const partialPayment = order1Total / 2; // Thanh to√°n 50%
        
        await processPayment(orderIds[0], tripId, partialPayment, 'Ti·ªÅn m·∫∑t', 'Thanh to√°n m·ªôt ph·∫ßn');
        console.log(`‚úÖ Thanh to√°n m·ªôt ph·∫ßn: ${formatCurrency(partialPayment)}`);

        console.log('\nüí∞ Test thanh to√°n ho√†n t·∫•t...');
        // Thanh to√°n ph·∫ßn c√≤n l·∫°i c·ªßa ƒë∆°n h√†ng ƒë·∫ßu ti√™n
        await processPayment(orderIds[0], tripId, partialPayment, 'Chuy·ªÉn kho·∫£n', 'Thanh to√°n ho√†n t·∫•t');
        console.log('‚úÖ Thanh to√°n ho√†n t·∫•t ƒë∆°n h√†ng ƒë·∫ßu ti√™n');

        // Thanh to√°n ho√†n t·∫•t ƒë∆°n h√†ng th·ª© hai
        const order2Total = testOrders[1].items[0].qty * testOrders[1].items[0].sellingPrice;
        await processPayment(orderIds[1], tripId, order2Total, 'Ti·ªÅn m·∫∑t', 'Thanh to√°n to√†n b·ªô');
        console.log('‚úÖ Thanh to√°n ho√†n t·∫•t ƒë∆°n h√†ng th·ª© hai');

        console.log('\nüè∑Ô∏è Test th√™m chi ph√≠ chuy·∫øn h√†ng...');
        // Test th√™m chi ph√≠
        const expenseData = {
            tripId: tripId,
            type: 'XƒÉng d·∫ßu',
            amount: 200000,
            description: 'Chi ph√≠ xƒÉng cho chuy·∫øn test',
            date: '2024-01-20'
        };
        
        await addTripExpense(expenseData);
        console.log('‚úÖ Th√™m chi ph√≠ chuy·∫øn h√†ng');

        console.log('\nüìä Test hi·ªÉn th·ªã chi ti·∫øt chuy·∫øn h√†ng...');
        // Test hi·ªÉn th·ªã modal chi ti·∫øt
        await showTripDetail(tripId);
        console.log('‚úÖ Modal chi ti·∫øt chuy·∫øn h√†ng ƒë√£ m·ªü');

        console.log('\n‚úÖ Test workflow ho√†n t·∫•t!');
        
        // Hi·ªÉn th·ªã t√≥m t·∫Øt
        console.log('\nüìã T√≥m t·∫Øt test:');
        console.log(`- T·∫°o ${customerIds.length} kh√°ch h√†ng`);
        console.log(`- T·∫°o ${productIds.length} s·∫£n ph·∫©m`);
        console.log(`- T·∫°o ${orderIds.length} ƒë∆°n h√†ng`);
        console.log(`- T·∫°o 1 chuy·∫øn h√†ng`);
        console.log('- Li√™n k·∫øt ƒë∆°n h√†ng v·ªõi chuy·∫øn h√†ng');
        console.log('- Test thanh to√°n t·ª´ng ph·∫ßn v√† ho√†n t·∫•t');
        console.log('- Test th√™m chi ph√≠ chuy·∫øn h√†ng');
        console.log('- Test hi·ªÉn th·ªã chi ti·∫øt chuy·∫øn h√†ng');

        return {
            tripId,
            orderIds,
            customerIds,
            productIds,
            success: true
        };

    } catch (error) {
        console.error('‚ùå L·ªói trong qu√° tr√¨nh test:', error);
        return { success: false, error };
    }
}

// Test ri√™ng c√°c ch·ª©c nƒÉng UI
async function testUIFunctions() {
    console.log('\nüé® Test c√°c ch·ª©c nƒÉng UI...');
    
    try {
        // Test openPaymentModal
        console.log('Test openPaymentModal...');
        if (typeof openPaymentModal === 'function') {
            // Kh√¥ng th·ª±c s·ª± m·ªü modal, ch·ªâ test function t·ªìn t·∫°i
            console.log('‚úÖ Function openPaymentModal ƒë√£ s·∫µn s√†ng');
        }

        // Test processPayment
        console.log('Test processPayment...');
        if (typeof processPayment === 'function') {
            console.log('‚úÖ Function processPayment ƒë√£ s·∫µn s√†ng');
        }

        // Test unlinkOrderFromTrip
        console.log('Test unlinkOrderFromTrip...');
        if (typeof unlinkOrderFromTrip === 'function') {
            console.log('‚úÖ Function unlinkOrderFromTrip ƒë√£ s·∫µn s√†ng');
        }

        // Test showOrderDetail
        console.log('Test showOrderDetail...');
        if (typeof showOrderDetail === 'function') {
            console.log('‚úÖ Function showOrderDetail ƒë√£ s·∫µn s√†ng');
        }

        // Test addTripExpense v√† deleteTripExpense
        console.log('Test expense functions...');
        if (typeof addTripExpense === 'function' && typeof deleteTripExpense === 'function') {
            console.log('‚úÖ Functions chi ph√≠ ƒë√£ s·∫µn s√†ng');
        }

        console.log('‚úÖ T·∫•t c·∫£ functions UI ƒë√£ s·∫µn s√†ng!');
        return true;

    } catch (error) {
        console.error('‚ùå L·ªói test UI functions:', error);
        return false;
    }
}

// Test workflow khi trang web ƒë√£ load xong
if (typeof window !== 'undefined') {
    window.addEventListener('load', async () => {
        console.log('üåê Trang web ƒë√£ load, b·∫Øt ƒë·∫ßu test...');
        
        // ƒê·ª£i DB kh·ªüi t·∫°o xong
        if (typeof db !== 'undefined' && db) {
            setTimeout(async () => {
                await testUIFunctions();
                console.log('\nüí° ƒê·ªÉ ch·∫°y test ƒë·∫ßy ƒë·ªß, h√£y g·ªçi: await runTestWorkflow()');
                
                // Export function ƒë·ªÉ c√≥ th·ªÉ g·ªçi t·ª´ console
                window.runTestWorkflow = runTestWorkflow;
                window.testUIFunctions = testUIFunctions;
            }, 2000);
        }
    });
}

console.log('üìù File test workflow ƒë√£ s·∫µn s√†ng!');
console.log('üí° ƒê·ªÉ ch·∫°y test, h√£y g·ªçi: await runTestWorkflow()'); 